DROP TABLE IF EXISTS "OSSoOrderInformations";
CREATE TABLE "public"."OSSoOrderInformations" (
    "Id" uuid,
    "OrderRefNumber" character varying(100) NULL,
    "External_OrdNBR" character varying(100) NULL,
    "OrderDate" timestamp,
    "DistributorCode" character varying(100) NULL,
    "Source" character varying(100) NULL,
    "CustomerId" character varying(100) NULL,
    "CustomerName" character varying(250) NULL,
    "CustomerShiptoId" character varying(50) NULL,
    "CustomerShiptoName" character varying(250) NULL,
    "CustomerFullAddress" character varying(250) NULL,
    "CustomerPhone" character varying(50) NULL,
    "Orig_Ord_SKUs" integer,
    "Orig_Ord_Qty" integer,
    "Orig_Promotion_Qty" integer,
    "Orig_Ord_Amt" numeric,
    "Promotion_Amt" numeric,
    "Orig_Ord_Disc_Amt" numeric,
    "Orig_Ordline_Disc_Amt" numeric,
    "Orig_Ord_Extend_Amt" numeric,
    "DiscountID" character varying(50) NULL,
    "DiscountDescription" character varying(250) NULL,
    "DiscountType" character varying(50) NULL,
    "PaymentType" character varying(50) NULL,
    "PaymentTypeDesc" character varying(250) NULL,
    "PaymentStatus" character varying(50) NULL,
    "PaymentBankNote" character varying(250) NULL,
    "DisBankName" character varying(250) NULL,
    "DisBankAccount" character varying(250) NULL,
    "DisBankAccountName" character varying(250) NULL,
    "DeliveryDate" timestamp,
    "ExpectShippedTime" timestamp,
    "DeliveryAddress" character varying(250) NULL,
    "DeliveryAddressNote" character varying(250) NULL,
    "ReceiverName" character varying(250) NULL,
    "ReceiverPhone" character varying(250) NULL,
    "TotalLine" integer,
    "Status" character varying(50) NULL,
    "CusAddressProvinceId" character varying(100) NULL,
    "CusAddressProvince" character varying(250) NULL,
    "CusAddressCountryId" character varying(100) NULL,
    "CusAddressCountry" character varying(250) NULL,
    "CusAddressDistrictId" character varying(100) NULL,
    "CusAddressDistrict" character varying(250) NULL,
    "CusAddressWardsId" character varying(100) NULL,
    "CusAddressWards" character varying(250) NULL,
    "CusAddress" VARCHAR,
    "CusAddressStreetNo" character varying(100) NULL,
    "DeliveryAddressProvinceId" character varying(100) NULL,
    "DeliveryAddressProvince" character varying(250) NULL,
    "DeliveryAddressCountryId" character varying(100) NULL,
    "DeliveryAddressCountry" character varying(250) NULL,
    "DeliveryAddressDistrictId" character varying(100) NULL,
    "DeliveryAddressDistrict" character varying(250) NULL,
    "DeliveryAddressWardsId" character varying(100) NULL,
    "DeliveryAddressWards" character varying(250) NULL,
    "DeliveryAddressStreetNo" character varying(100) NULL,
    "IsDeleted" boolean,
    "CreatedBy" character varying(250) NULL,
    "CreatedDate" timestamp,
    "UpdatedBy" character varying(250) NULL,
    "UpdatedDate" timestamp,
    "ImportStatus" character varying(100) NULL,
    "OwnerType" character varying(100) NULL,
    "OwnerCode" character varying(255) NULL,
    CONSTRAINT "PK_OSSoOrderInformations" PRIMARY KEY ("Id")
);

DROP TABLE IF EXISTS "OSSoOrderItems";
CREATE TABLE "public"."OSSoOrderItems" (
    "Id" uuid,
    "OrderRefNumber" character varying(50) NULL,
    "External_OrdNBR" character varying(100) NULL,
    "ItemCode" character varying(100) NULL,
    "ItemDescription" character varying(255) NULL,
    "ItemGroupCode" character varying(100) NULL,
    "ItemGroupDescription" character varying(255) NULL,
    "DemandOrderQty" integer,
    "OriginalOrderQty" integer,
    "OriginalOrderBaseQty" integer,
    "OriginalOrderQtyBooked" integer,
    "Orig_Ord_Line_Amt" double precision NULL,
    "Orig_Ord_line_Disc_Amt" double precision NULL,
    "Orig_Ord_Line_Extend_Amt" double precision NULL,
    "UOM" character varying(50) NULL,
    "UOMDesc" character varying(50) NULL,
    "VatValue" double precision NULL,
    "VATCode" character varying(50) NULL,
    "VAT" double precision NULL,
    "IsFree" boolean NULL,
    "BaseUnitCode" character varying(50) NULL,
    "PurchaseUnitCode" character varying(50) NULL,
    "SalesUnitCode" character varying(50) NULL,
    "SaleUnitDescription" character varying(100) NULL,
    "DiscountType" character varying(100) NULL,
    "DisCountAmount" double precision NULL,
    "DiscountPercented" double precision NULL,
    "RewardDescription" character varying(255) NULL,
    "PromotionType" character varying(100) NULL,
    "PromotionCode" character varying(100) NULL,
    "PromotionDescription" character varying(255) NULL,
    "PromotionLevelCode" character varying(100) NULL,
    "UnitRate" double precision NULL,
    "OrigUnitPrice" double precision NULL,
    "UnitPrice" double precision NULL,
    "InventoryAttibute1" character varying(50) NULL,
    "InventoryAttibute2" character varying(50) NULL,
    "InventoryAttibute3" character varying(50) NULL,
    "InventoryAttibute4" character varying(50) NULL,
    "InventoryAttibute5" character varying(50) NULL,
    "InventoryAttibute6" character varying(50) NULL,
    "InventoryAttibute7" character varying(50) NULL,
    "InventoryAttibute8" character varying(50) NULL,
    "InventoryAttibute9" character varying(50) NULL,
    "InventoryAttibute10" character varying(50) NULL,
    "IsKit" boolean NULL,
    "KitId" character varying(255) NULL,
    "AllocateType" character varying(100) NULL,
    "BudgetImport" boolean NULL,
    "StockImport" boolean NULL,
    "BudgetCheckStatus" boolean NULL,
    "BudgetCode" character varying(100) NULL,
    "BudgetType" character varying(100) NULL,
    "BudgetDemand" integer NULL,
    "BudgetBooked" integer NULL,
    "BudgetBook" integer NULL,
    "BudgetBookOver" boolean NULL,
    "BudgetBookOption" character varying(100) NULL,
    "IsBudget" boolean NULL,
    "IsDeleted" boolean NULL,
    "CreatedDate" timestamp(6) NULL,
    "UpdatedDate" timestamp(6) NULL,
    "CreatedBy" character varying(100) NULL,
    "UpdatedBy" character varying(100) NULL,
    "OwnerType" character varying(100) NULL,
    "OwnerCode" character varying(255) NULL,
    CONSTRAINT "PK_OSSoOrderItems" PRIMARY KEY ("Id")
);

CREATE TABLE public."OSOrderInformations" (
    "Id" uuid NOT NULL,
    "OrderRefNumber" character varying(100),
    "External_OrdNBR" character varying(100),
    "IsDirect" boolean,
    "OrderType" character varying(50),
    "PrincipalID" character varying(50),
    "DistributorCode" character varying(50),
    "OrderDate" timestamp(6) without time zone,
    "CustomerId" character varying(100),
    "CustomerName" character varying(255),
    "CustomerAddress" character varying(255),
    "CustomerPhone" character varying(20),
    "Source" character varying(20),
    "Orig_Ord_SKUs" integer,
    "Orig_Ord_Qty" integer,
    "Orig_Promotion_Qty" integer,
    "Orig_Ord_Amt" double precision,
    "Promotion_Amt" double precision,
    "Orig_Ord_Disc_Amt" double precision,
    "Orig_Ordline_Disc_Amt" double precision,
    "Orig_Ord_Extend_Amt" double precision,
    "DiscountID" character varying(100),
    "DiscountDescription" character varying(255),
    "DiscountType" character varying(100),
    "TotalLine" integer,
    "ShippedDate" timestamp(6) without time zone,
    "ExpectShippedDate" timestamp(6) without time zone,
    "OrderDescription" character varying(255),
    "PaymentType" character varying(100),
    "PaymentTypeDesc" character varying(100),
    "ImportStatus" character varying(10),
    "Status" character varying(50),
    "CustomerType" character varying(100),
    "MainCustomerId" character varying(100),
    "PaymentStatus" character varying(100),
    "PaymentBankNote" character varying(255),
    "DisBankName" character varying(100),
    "DisBankAccount" character varying(100),
    "DisBankAccountName" character varying(100),
    "DeliveryAddress" text,
    "DeliveryAddressNote" text,
    "ReceiverName" character varying(100),
    "ReceiverPhone" character varying(50),
    "IsDeleted" boolean,
    "CreatedBy" character varying(100),
    "CreatedDate" timestamp(6) without time zone,
    "UpdatedBy" character varying(100),
    "UpdatedDate" timestamp(6) without time zone,
    "CusAddressProvinceId" character varying(100),
    "CusAddressProvince" character varying(255),
    "CusAddressCountryId" character varying(100),
    "CusAddressCountry" character varying(255),
    "CusAddressDistrictId" character varying(100),
    "CusAddressDistrict" character varying(255),
    "CusAddressWardId" character varying(100),
    "CusAddressWard" character varying(255),
    "CusAddressStreetNo" character varying(100),
    "CusAddressLat" double precision,
    "CusAddressLong" double precision,
    "DeliveryAddressProvinceId" character varying(100),
    "DeliveryAddressProvince" character varying(255),
    "DeliveryAddressCountryId" character varying(100),
    "DeliveryAddressCountry" character varying(255),
    "DeliveryAddressDistrictId" character varying(100),
    "DeliveryAddressDistrict" character varying(255),
    "DeliveryAddressWardId" character varying(100),
    "DeliveryAddressWard" character varying(255),
    "DeliveryAddressStreetNo" character varying(100),
    "DeliveryAddressLat" double precision,
    "DeliveryAddressLong" double precision,
    CONSTRAINT "PK_OSOrderInformations" PRIMARY KEY ("Id")
);

CREATE TABLE public."OSOrderItems" (
    "Id" uuid NOT NULL,
    "OrderRefNumber" character varying(100),
    "External_OrdNBR" character varying(100),
    "ItemCode" character varying(100),
    "ItemShortName" character varying(100),
    "ItemDescription" character varying(255),
    "ItemGroupCode" character varying(100),
    "ItemGroupName" character varying(100),
    "ItemGroupDescription" character varying(255),
    "InventoryAttibute1" character varying(100),
    "InventoryAttibute2" character varying(100),
    "InventoryAttibute3" character varying(100),
    "InventoryAttibute4" character varying(100),
    "InventoryAttibute5" character varying(100),
    "InventoryAttibute6" character varying(100),
    "InventoryAttibute7" character varying(100),
    "InventoryAttibute8" character varying(100),
    "InventoryAttibute9" character varying(100),
    "InventoryAttibute10" character varying(100),
    "IsKit" boolean,
    "KitId" character varying(100),
    "KitName" character varying(255),
    "KitQuantity" integer,
    "KitAmount" double precision,
    "KitUomId" character varying(100),
    "KitUomName" character varying(255),
    "KitUnitPrice" double precision,
    "BaseUnitCode" character varying(100),
    "PurchaseUnitCode" character varying(100),
    "SalesUnitCode" character varying(100),
    "SaleUnitDescription" character varying(255),
    "UOM" character varying(100),
    "UOMDesc" character varying(100),
    "UnitRate" double precision,
    "UnitPrice" double precision,
    "OrigUnitPrice" double precision,
    "IsFree" boolean,
    "VatValue" double precision,
    "VATCode" character varying(100),
    "VAT" double precision,
    "DemandOrderQty" integer,
    "OriginalOrderQty" integer,
    "OriginalOrderBaseQty" integer,
    "OriginalOrderQtyBooked" integer,
    "StockCheckStatus" boolean,
    "RequiredCheckStock" boolean,
    "PendingOrder" boolean,
    "WaittingStock" boolean,
    "AllocateType" character varying(100),
    "Orig_Ord_Line_Amt" double precision,
    "Orig_Ord_line_Disc_Amt" double precision,
    "DiscountType" character varying(100),
    "Orig_Ord_Line_Extend_Amt" double precision,
    "DisCountAmount" double precision,
    "DiscountPercented" double precision,
    "IsBudget" boolean,
    "BudgetCheckStatus" boolean,
    "BudgetCode" character varying(100),
    "BudgetType" character varying(100),
    "BudgetDemand" integer,
    "BudgetBooked" integer,
    "BudgetBook" integer,
    "BudgetBookOver" boolean,
    "BudgetBookOption" character varying(10),
    "BudgetImport" boolean,
    "AllowChangeSKU" integer,
    "PromotionOrderRule" character varying(100),
    "PromotionOrderType" character varying(100),
    "PromotionRuleofGiving" character varying(100),
    "PromotionOrderQty" integer,
    "PromotionProductAmount" double precision,
    "PromotionProductQty" integer,
    "PromotionType" character varying(100),
    "PromotionCode" character varying(100),
    "PromotionDescription" character varying(255),
    "PromotionLevelCode" character varying(100),
    "PromotionLevelDescription" character varying(255),
    "RewardDescription" character varying(255),
    "NumberPickedLevel" integer,
    "OwnerType" character varying(100),
    "OwnerCode" character varying(255),
    "IsDeleted" boolean,
    "CreatedBy" character varying(100),
    "CreatedDate" timestamp(6) without time zone,
    "UpdatedBy" character varying(100),
    "UpdatedDate" timestamp(6) without time zone,
    "DisPriceVolumeCode" character varying(100),
    "DisPriceVolumeQuantities" integer,
    "DisPriceVolumeDiscount" double precision,
    CONSTRAINT "PK_OSOrderItems" PRIMARY KEY ("Id")
);

DO $$
DECLARE
    schema_base text;
    table_sql text;
    schemaname text;
    schema_list TEXT[];
    ErrorMessage text;
BEGIN
    -- Get schema_base name form "SystemSettings"
	schema_base := (SELECT "SettingValue" FROM "SystemSettings" WHERE "SettingType" = 'ODSchema' AND "SettingKey" = 'SchemaBaseName' AND "IsActive" = 't' LIMIT 1);

    IF schema_base IS NOT NULL AND LENGTH(schema_base) > 0 
    THEN
        -- Start a transaction 
        BEGIN
            -- Insert into "ODDistributorCommonTables" with condition
            table_sql := 'INSERT INTO "ODDistributorCommonTables"("Id", "TableName", "Status") (' ||
            'SELECT uuid_generate_v4() AS "Id", ''OSOrderItems'' AS "TableName", ''ACTIVE'' AS "Status" ' ||
            'WHERE NOT EXISTS(SELECT "TableName" FROM "ODDistributorCommonTables" WHERE "TableName" = ''OSOrderItems''));';
            EXECUTE table_sql;

            -- get schemabase & schema in "ODDistributorSchemas"
            schema_list := ARRAY(SELECT distinct "SchemaName" FROM "ODDistributorSchemas" Union SELECT schema_base);
            -- add schema public to list
            schema_list := ARRAY_APPEND(schema_list, 'public');
            FOREACH schemaname IN ARRAY schema_list 
            LOOP
                schemaname := TRIM(schemaname);
                --check schemaname is existed
                IF EXISTS(SELECT schema_name
                    FROM information_schema.schemata
                    WHERE schema_name = schemaname)
                THEN
                    ---sample sql to add table
                    table_sql := 'CREATE TABLE IF NOT EXISTS ' || quote_ident(schemaname) || '."OSOrderItems" (
    "Id" uuid NOT NULL,
    "OrderRefNumber" character varying(100),
    "External_OrdNBR" character varying(100),
    "ItemCode" character varying(100),
    "ItemShortName" character varying(100),
    "ItemDescription" character varying(255),
    "ItemGroupCode" character varying(100),
    "ItemGroupName" character varying(100),
    "ItemGroupDescription" character varying(255),
    "InventoryAttibute1" character varying(100),
    "InventoryAttibute2" character varying(100),
    "InventoryAttibute3" character varying(100),
    "InventoryAttibute4" character varying(100),
    "InventoryAttibute5" character varying(100),
    "InventoryAttibute6" character varying(100),
    "InventoryAttibute7" character varying(100),
    "InventoryAttibute8" character varying(100),
    "InventoryAttibute9" character varying(100),
    "InventoryAttibute10" character varying(100),
    "IsKit" boolean,
    "KitId" character varying(100),
    "KitName" character varying(255),
    "KitQuantity" integer,
    "KitAmount" double precision,
    "KitUomId" character varying(100),
    "KitUomName" character varying(255),
    "KitUnitPrice" double precision,
    "BaseUnitCode" character varying(100),
    "PurchaseUnitCode" character varying(100),
    "SalesUnitCode" character varying(100),
    "SaleUnitDescription" character varying(255),
    "UOM" character varying(100),
    "UOMDesc" character varying(100),
    "UnitRate" double precision,
    "UnitPrice" double precision,
    "OrigUnitPrice" double precision,
    "IsFree" boolean,
    "VatValue" double precision,
    "VATCode" character varying(100),
    "VAT" double precision,
    "DemandOrderQty" integer,
    "OriginalOrderQty" integer,
    "OriginalOrderBaseQty" integer,
    "OriginalOrderQtyBooked" integer,
    "StockCheckStatus" boolean,
    "RequiredCheckStock" boolean,
    "PendingOrder" boolean,
    "WaittingStock" boolean,
    "AllocateType" character varying(100),
    "Orig_Ord_Line_Amt" double precision,
    "Orig_Ord_line_Disc_Amt" double precision,
    "DiscountType" character varying(100),
    "Orig_Ord_Line_Extend_Amt" double precision,
    "DisCountAmount" double precision,
    "DiscountPercented" double precision,
    "IsBudget" boolean,
    "BudgetCheckStatus" boolean,
    "BudgetCode" character varying(100),
    "BudgetType" character varying(100),
    "BudgetDemand" integer,
    "BudgetBooked" integer,
    "BudgetBook" integer,
    "BudgetBookOver" boolean,
    "BudgetBookOption" character varying(10),
    "BudgetImport" boolean,
    "AllowChangeSKU" integer,
    "PromotionOrderRule" character varying(100),
    "PromotionOrderType" character varying(100),
    "PromotionRuleofGiving" character varying(100),
    "PromotionOrderQty" integer,
    "PromotionProductAmount" double precision,
    "PromotionProductQty" integer,
    "PromotionType" character varying(100),
    "PromotionCode" character varying(100),
    "PromotionDescription" character varying(255),
    "PromotionLevelCode" character varying(100),
    "PromotionLevelDescription" character varying(255),
    "RewardDescription" character varying(255),
    "NumberPickedLevel" integer,
    "OwnerType" character varying(100),
    "OwnerCode" character varying(255),
    "IsDeleted" boolean,
    "CreatedBy" character varying(100),
    "CreatedDate" timestamp(6) without time zone,
    "UpdatedBy" character varying(100),
    "UpdatedDate" timestamp(6) without time zone,
    "DisPriceVolumeCode" character varying(100),
    "DisPriceVolumeQuantities" integer,
    "DisPriceVolumeDiscount" double precision,
    CONSTRAINT "PK_OSOrderItems" PRIMARY KEY ("Id")
);';
                    EXECUTE table_sql;
                END IF;
            END LOOP;
        EXCEPTION WHEN others THEN
            --Rollback the transaction if an error occurs
            --- add log into StagingSyncDataHistories when not success
            ROLLBACK;
            ErrorMessage := SQLERRM;
            table_sql := 'INSERT INTO "StagingSyncDataHistories"("Id","DataType","RequestType","InsertStatus","TimeRunAdhoc","StartDate","EndDate","CreatedBy","CreatedDate","UpdatedBy","UpdatedDate","ErrorMessage") VALUES(' 
                   || 'uuid_generate_v1(), ''ADD_TABLE'', ''Insert'',''FAILED'', NOW(), NOW(), NOW(), ''Admin'' ,NOW(), ''Admin'' ,NOW(), ' || quote_literal(ErrorMessage) || ');';
            EXECUTE table_sql;  
        END;
    END IF;
END $$;